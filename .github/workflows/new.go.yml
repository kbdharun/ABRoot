name: Go (test-integration)

on:
  push:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/vanilla-os/pico:main

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y libbtrfs-dev libdevmapper-dev libgpgme-dev pkg-config build-essential libdpkg-dev

      - name: Build
        run: go build -o abrootv2

      - name: Test
        run: go test -v ./tests/...

      - name: Compress
        run: tar -czvf abrootv2.tar.gz abrootv2

      - name: Compress-manpage
        run: tar -czvf abroot-man.tar.gz man/man1/abroot.1

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            abrootv2.tar.gz
            abroot-man.tar.gz

  test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts

      - name: Install Docker and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io parted mount kpartx kmod dosfstools libbtrfs-dev libdevmapper-dev libgpgme-dev pkg-config build-essential libdpkg-dev qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager

      - name: Verify KVM
        run: |
          lsmod | grep kvm
          sudo kvm-ok || echo "KVM is not supported"

      - name: Run Integration Test in Docker
        run: |
          docker run --privileged \
            --device /dev/kvm \
            --cap-add=ALL \
            --security-opt seccomp=unconfined \
            -v "$PWD/artifacts:/artifacts" \
            ghcr.io/vanilla-os/pico:main \
            /bin/bash -c "
              tar -xzvf /artifacts/abrootv2.tar.gz -C /root
              cd /root
              dd if=/dev/zero of=vos-var.img bs=1M count=1024
              dd if=/dev/zero of=vos-a.img bs=1M count=1024
              dd if=/dev/zero of=vos-b.img bs=1M count=1024
              dd if=/dev/zero of=vos-boot.img bs=1M count=100
              dd if=/dev/zero of=vos-efi.img bs=1M count=100

              losetup -Pf --show vos-var.img
              losetup -Pf --show vos-a.img
              losetup -Pf --show vos-b.img
              losetup -Pf --show vos-boot.img
              losetup -Pf --show vos-efi.img

              sleep 10

              mkfs.ext4 -L vos-var /dev/loop0
              mkfs.ext4 -L vos-a /dev/loop1
              mkfs.ext4 -L vos-b /dev/loop2
              mkfs.ext4 -L vos-boot /dev/loop3
              mkfs.vfat -n vos-efi /dev/loop4

              sleep 10

              ./abrootv2 status --verbose
            "

  release:
    name: Release
    needs: [test]
    runs-on: ubuntu-latest
    if: github.repository == 'vanilla-os/ABRoot' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - uses: softprops/action-gh-release@v2
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "continuous"
          prerelease: true
          name: "Continuous Build"
          files: |
            abrootv2.tar.gz
            abroot-man.tar.gz
